#!/usr/bin/env bash
# This script was generated by bashly 1.2.9 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
barekube_usage() {
  printf "barekube - CLI that provides functionality for installing and configuring bare kubernetes based on k3s and gVisor.\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  barekube COMMAND\n"
  printf "  barekube [COMMAND] --help | -h\n"
  printf "  barekube --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   \n" "$(green "install")                      "
  [[ -n "$long_usage" ]] && printf "  %s   Install and configure barekube dependencies\n" "$(green "install dependencies")         "
  [[ -n "$long_usage" ]] && printf "  %s   Install and configure barekube kubernetes distribution (k3s)\n" "$(green "install initial-master")       "
  [[ -n "$long_usage" ]] && printf "  %s   Install and configure another k3s master node\n" "$(green "install master-node")          "
  [[ -n "$long_usage" ]] && printf "  %s   Install and configure k3s agent node\n" "$(green "install agent-node")           "
  printf "  %s   To fix multipathd issue, please visit https://longhorn.io/kb/troubleshooting-volume-with-multipath/\n" "$(green "longhorn")                     "
  [[ -n "$long_usage" ]] && printf "  %s   Install and configure Longhorn storage dependencies\n" "$(green "longhorn install-dependencies")"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    # :command.footer
    printf "MIT License: https://github.com/kostiantyn-matsebora/barekube/blob/master/LICENSE\nCopyright (c) 2025 Kostiantyn Matsebora\n"
    echo

  fi
}

# :command.usage
barekube_install_usage() {
  printf "barekube install\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  barekube install COMMAND\n"
  printf "  barekube install [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install and configure barekube dependencies\n" "$(green "dependencies")  "
  printf "  %s   Install and configure barekube kubernetes distribution (k3s)\n" "$(green "initial-master")"
  printf "  %s   Install and configure another k3s master node\n" "$(green "master-node")   "
  printf "  %s   Install and configure k3s agent node\n" "$(green "agent-node")    "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  barekube install dependencies\n"
    printf "  barekube install initial-master --reinstall\n"
    printf "  barekube install master-node\n"
    printf "  barekube install agent-node --reinstall\n"
    echo

  fi
}

# :command.usage
barekube_install_dependencies_usage() {
  printf "barekube install dependencies - Install and configure barekube dependencies\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  barekube install dependencies\n"
  printf "  barekube install dependencies --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
barekube_install_initial_master_usage() {
  printf "barekube install initial-master - Install and configure barekube kubernetes distribution (k3s)\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  barekube install initial-master [OPTIONS]\n"
  printf "  barekube install initial-master --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--reinstall")"
    printf "    Reinstall k3s\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
barekube_install_master_node_usage() {
  printf "barekube install master-node - Install and configure another k3s master node\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  barekube install master-node [OPTIONS]\n"
  printf "  barekube install master-node --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--reinstall")"
    printf "    Reinstall k3s\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
barekube_install_agent_node_usage() {
  printf "barekube install agent-node - Install and configure k3s agent node\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  barekube install agent-node [OPTIONS]\n"
  printf "  barekube install agent-node --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--reinstall")"
    printf "    Reinstall k3s\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
barekube_longhorn_usage() {
  printf "barekube longhorn - To fix multipathd issue, please visit https://longhorn.io/kb/troubleshooting-volume-with-multipath/\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  barekube longhorn COMMAND\n"
  printf "  barekube longhorn [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Install and configure Longhorn storage dependencies\n" "$(green "install-dependencies")"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  barekube longhorn install-dependencies\n"
    echo

  fi
}

# :command.usage
barekube_longhorn_install_dependencies_usage() {
  printf "barekube longhorn install-dependencies - Install and configure Longhorn storage dependencies\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  barekube longhorn install-dependencies\n"
  printf "  barekube longhorn install-dependencies --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# ./src/barekube.sh
#!/bin/bash

update_packages() {
    echo_message "Updating packages..."
    sudo apt update

    exit_if_error "Failed to update packages"
}

install_containerd() {
    echo_message "Installing containerd..."
    sudo apt install -y containerd
    exit_if_error "Failed to install containerd"
}

install_gvisor() {

     echo_message "Installing gVisor dependencies..."
     sudo apt install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg

    echo_message "Adding gVisor key..."
    curl -fsSL https://gvisor.dev/archive.key | sudo gpg --dearmor -o /usr/share/keyrings/gvisor-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/gvisor-archive-keyring.gpg] https://storage.googleapis.com/gvisor/releases release main" | sudo tee /etc/apt/sources.list.d/gvisor.list > /dev/null

    exit_if_error "Failed to add gVisor key"

    echo_message "Installing gVisor..."
    sudo apt-get update && sudo apt-get install -y runsc

    exit_if_error "Failed to install gVisor"
}

register_gvisor_to_containerd() {
    echo_message "Checking containerd configuration..."
    grep -q ".containerd.runtimes.runsc" /etc/containerd/config.toml

    if [ $? -ne "0" ]
    then
    echo_info "Adding runsc runtime to containerd configuration..."
cat << EOF | sudo tee /etc/containerd/config.toml
            version = 2
            [plugins."io.containerd.runtime.v1.linux"]
            shim_debug = true
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runsc]
            runtime_type = "io.containerd.runsc.v1"
EOF
    exit_if_error "Failed to add runsc runtime to containerd configuration"

    echo_message "Restarting containerd..."
    sudo systemctl restart containerd
    exit_if_error "Failed to register gVisor to containerd"
    fi
    return 0
}

install_wireguard() {
    echo_message "Installing wireguard..."
    sudo apt install -y wireguard
    exit_if_error  "Failed to install wireguard"
}

check_k3s_installed() {
    echo_message "Checking if k3s is already installed..."
    check_if_command_exists "k3s"
     if [[ $? -eq 0 ]]
     then
         echo_info "k3s is already installed."
         if [[ "$1" -ne "1" ]]
         then
             exit 0
         fi
     fi
}

gather_additional_args() {
    local ADDITIONAL_ARGS=""
    yes_or_no "Do you want to set additional arguments?"
    if [[ $? -ne 0 ]]
    then
        return 0
    fi

    yes_or_no "Do you want to disable load balancer"
    if [[ $? -eq 0 ]]
    then
        ADDITIONAL_ARGS="$ADDITIONAL_ARGS --disable=servicelb"
    fi
    yes_or_no "Do you want to disable traefik"
    if [[ $? -eq 0 ]]
    then
        ADDITIONAL_ARGS="$ADDITIONAL_ARGS --disable=traefik"
    fi
    yes_or_no "Do you want to set TLS SAN?"
    if [[ $? -eq 0 ]]
    then
        local SAN
        SAN=$(read_input  "Enter the SAN:")
        ADDITIONAL_ARGS="$ADDITIONAL_ARGS --tls-san $SAN"
    fi
    yes_or_no "Do you want to add another additional arguments?"
    if [[ $? -eq 0 ]]
    then
        ADDITIONAL_ARGS="$ADDITIONAL_ARGS $(read_input  "Enter the additional arguments:")"
    fi
    echo "$ADDITIONAL_ARGS"
}

gather_master_params() {
    local MASTER_PARAMS
    local MASTER_URL
    MASTER_URL=$(read_input "Enter the master URL(e.g. https://192.168.1.1:6443):")
    if [[ -z "$MASTER_URL" ]]
    then
        echo_error "Master URL is required."
        exit 1
    fi

    MASTER_PARAMS="$MASTER_PARAMS --server=$MASTER_URL"
    TOKEN=$(read_input  "Enter the token:")
    if [[ -z "$TOKEN" ]]
    then
        echo_error "Token is required."
        exit 1
    fi
    MASTER_PARAMS="$MASTER_PARAMS --token=$TOKEN"
    echo "$MASTER_PARAMS"
}

install_k3s_initial_master() {
    check_k3s_installed "$1"
    echo_message "Installing initial k3s master node..."
    local COMMAND
    COMMAND="curl -sfL https://get.k3s.io | sh -s - server  --cluster-init --flannel-backend wireguard-native $2"
    echo_message "Running command: $COMMAND"
    eval "$COMMAND"
    exit_if_error "Failed to install k3s"

    echo_message "Getting token..."
    local K3S_TOKEN
    K3S_TOKEN=$(sudo cat /var/lib/rancher/k3s/server/token)
    echo_message "K3S_TOKEN: $(magenta """$K3S_TOKEN""")"
    echo_message "Use it for joining agents and other master nodes to the cluster."
    return 0
}

install_k3s_master() {
    check_k3s_installed "$1"
    echo_message "Installing k3s master node..."
    local COMMAND
    COMMAND="curl -sfL https://get.k3s.io | sh -s - server """$2""" --flannel-backend wireguard-native """$3""""
    echo_message "Running command: $COMMAND"
    eval "$COMMAND"
    exit_if_error "Failed to install k3s"
    return 0
}

install_k3s_agent() {
    check_k3s_installed "$1"
    echo_message "Installing k3s agent node..."
    local COMMAND
    COMMAND="curl -sfL https://get.k3s.io | sh -s - agent """$2""" --flannel-backend wireguard-native """$3""""
    echo_message "Running command: $COMMAND"
    eval "$COMMAND"
    exit_if_error "Failed to install k3s"
    return 0
    return 0
}

# ./src/longhorn.sh
#!/bin/bash
install_longhorn_dependencies() {
    echo_message "Updating packages..." && sudo apt update
    echo_message "Installing open-iscsi..." && sudo apt install -y open-iscsi
    echo_message "Installing bash..." && sudo apt install -y bash
    echo_message "Installing curl..." && sudo apt install -y curl
    echo_message "Installing grep..." && sudo apt install -y grep
    echo_message "Installing nfs-common..." && sudo apt install -y nfs-common
    return 0
}

# ./src/shared/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# ./src/shared/shared.sh
#!/bin/bash

timestamp() {
  date +%F_%T # current date and time
}

green() {
    echo -e "\033[0;32m$1\033[0m"
}

yellow_bold() {
    echo -e "\033[1;33m$1\033[0m"
}

red() {
    echo -e "\033[0;31m$1\033[0m"
}

green_bold() {
    echo -e "\033[1;92m$1\033[0m"
}

magenta() {
    echo -e "\033[0;35m$1\033[0m"
}

echo_message(){
    echo -e "$(green "[$(timestamp)] $1\n")"
}

echo_info(){
    echo -e "$(yellow_bold "[$(timestamp)] $1\n")"

}

echo_important(){
    echo -e "$(magenta "[$(timestamp)] $1\n")"

}

echo_error(){
    echo -e "$(red "[$(timestamp)] $1\n")"
}

function question(){
    local MESSAGE
    MESSAGE=$(green_bold "[$(timestamp)] $1\n")

    read -sn 1 -r -p "$MESSAGE" ANSWER
    # shellcheck disable=SC2028
    echo  "${ANSWER//[$'\t\r\n ']}"
}

function read_input(){
    local MESSAGE
    MESSAGE=$(green_bold "[$(timestamp)] $1\n")

    read -r -p "$MESSAGE" ANSWER
    # shellcheck disable=SC2028
    echo  "${ANSWER//[$'\t\r\n ']}"
}

function exit_if_error(){
    if [ "$?" -ne "0" ]
    then
        echo_error "$1"
        exit $?
    fi
}

function echo_final(){
    if [ "$?" -ne "0" ]
    then
        echo_error "$1"
        exit $?
    else

        echo_info "$2"
    fi
}

function yes_or_no(){
    if [[ "$2" == "0" ]]
    then
        return 0
    fi

    local ANSWER
    ANSWER=$(question "$1 [y/n]")
    if [[ "$ANSWER" = "y" || "$ANSWER" = "Y" ]]
    then
        return 0
    else
        return 1
    fi
}

function exit_if_answer_no() {
    if [[ $? -ne 0 ]]
    then
        echo_message "Exiting..."
        exit 0
    fi
}

function is_automatic_mode(){
    if [[ "$1" == "--yes" || "$1" == "-y" ]]
    then
        echo 0
    else
        echo 1
    fi
}

function press_any_key(){
    read -n 1 -s -r -p "Press any key to continue..."
}

function check_if_command_exists(){
    command -v "$1" &> /dev/null
    if [ $? -ne 0 ]
    then
        return 1
    else
        return 0
    fi
}

# :command.command_functions

# :command.function
barekube_install_dependencies_command() {

  # ./commands/install/dependencies.sh
  echo "# This file is located at './commands/install/dependencies.sh'."
  echo "# It contains the implementation for the 'barekube install dependencies' command."
  echo "# The code you write here will be wrapped by a function named 'barekube_install_dependencies_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args
  echo_info "Installing dependencies..."
  update_packages
  install_containerd
  install_gvisor
  register_gvisor_to_containerd
  install_wireguard
  echo_final "Failed to install dependencies." "Dependencies are installed succcessfully."

}

# :command.function
barekube_install_initial_master_command() {

  # ./commands/install/initial-master.sh
  echo "# This file is located at './commands/install/kubernetes/initial-master.sh'."
  echo "# It contains the implementation for the 'barekube install kubernetes initial-master' command."
  echo "# The code you write here will be wrapped by a function named 'barekube_install_kubernetes_initial_master_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args
  echo_info "Installing initial k3s master node..."

  ADDITIONAL_ARGS=$(gather_additional_args)
  echo_info "Installing master node..."
  echo_info "Additional arguments: $ADDITIONAL_ARGS"
  # shellcheck disable=SC2154
  install_k3s_initial_master "${args[--reinstall]}" "${ADDITIONAL_ARGS}"
  echo_final "Failed to install initial k3s master node." "Initial k3s master node installed successfully."

}

# :command.function
barekube_install_master_node_command() {

  # ./commands/install/master-node.sh
  echo "# This file is located at './commands/install/master.sh'."
  echo "# It contains the implementation for the 'barekube install master' command."
  echo "# The code you write here will be wrapped by a function named 'barekube_install_master_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args
  MASTER_PARAMS=$(gather_master_params)
  ADDITIONAL_ARGS=$(gather_additional_args)
  echo_info "Installing master node..."
  # shellcheck disable=SC2154
  echo_info "Master parameters: $MASTER_PARAMS"
  echo_info "Additional arguments: $ADDITIONAL_ARGS"
  install_k3s_master "${args[--reinstall]}" "$MASTER_PARAMS" "$ADDITIONAL_ARGS"
  echo_final "Failed to install k3s master node." "Another k3s master node installed successfully."

}

# :command.function
barekube_install_agent_node_command() {

  # ./commands/install/agent-node.sh
  echo "# This file is located at './commands/install/master.sh'."
  echo "# It contains the implementation for the 'barekube install master' command."
  echo "# The code you write here will be wrapped by a function named 'barekube_install_master_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args
  MASTER_PARAMS=$(gather_master_params)
  ADDITIONAL_ARGS=$(gather_additional_args)
  echo_info "Installing agent node..."
  # shellcheck disable=SC2154
  echo_info "Master parameters: $MASTER_PARAMS"
  echo_info "Additional arguments: $ADDITIONAL_ARGS"
  install_k3s_agent "${args[--reinstall]}" "$MASTER_PARAMS" "$ADDITIONAL_ARGS"
  echo_final "Failed to install k3s agent node." "Another k3s agent node installed successfully."

}

# :command.function
barekube_longhorn_install_dependencies_command() {

  # ./commands/longhorn/install-dependencies.sh
  echo "# This file is located at './commands/longhorn/install-dependencies.sh'."
  echo "# It contains the implementation for the 'barekube longhorn install-dependencies' command."
  echo "# The code you write here will be wrapped by a function named 'barekube_longhorn_install_dependencies_command()'."
  echo "# Feel free to edit this file; your changes will persist when regenerating."
  inspect_args

  echo_info "Installing longhorn dependencies..."
  install_longhorn_dependencies

  echo_final "Failed to install longhorn dependencies." "Longhorn dependencies are installed succcessfully."
  echo_info "To fix multipath issue, please follow instructions: $(magenta """https://longhorn.io/kb/troubleshooting-volume-with-multipath/""")"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        barekube_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install)
      action="install"
      shift
      barekube_install_parse_requirements "$@"
      shift $#
      ;;

    longhorn)
      action="longhorn"
      shift
      barekube_longhorn_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      barekube_usage >&2
      exit 1
      ;;

    *)
      if [[ -x "$(command -v "barekube-$action")" ]]; then
        shift
        exec "barekube-$action" "$@"
      else
        printf "invalid command: %s\n" "$action" >&2
        exit 1
      fi
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
barekube_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        barekube_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    dependencies)
      action="dependencies"
      shift
      barekube_install_dependencies_parse_requirements "$@"
      shift $#
      ;;

    initial-master)
      action="initial-master"
      shift
      barekube_install_initial_master_parse_requirements "$@"
      shift $#
      ;;

    master-node)
      action="master-node"
      shift
      barekube_install_master_node_parse_requirements "$@"
      shift $#
      ;;

    agent-node)
      action="agent-node"
      shift
      barekube_install_agent_node_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      barekube_install_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
barekube_install_dependencies_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        barekube_install_dependencies_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install dependencies"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
barekube_install_initial_master_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        barekube_install_initial_master_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install initial-master"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --reinstall)

        # :flag.case_no_arg
        args['--reinstall']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
barekube_install_master_node_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        barekube_install_master_node_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install master-node"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --reinstall)

        # :flag.case_no_arg
        args['--reinstall']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
barekube_install_agent_node_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        barekube_install_agent_node_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install agent-node"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --reinstall)

        # :flag.case_no_arg
        args['--reinstall']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
barekube_longhorn_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        barekube_longhorn_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install-dependencies)
      action="install-dependencies"
      shift
      barekube_longhorn_install_dependencies_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      barekube_longhorn_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
barekube_longhorn_install_dependencies_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        barekube_longhorn_install_dependencies_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="longhorn install-dependencies"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  declare -g version="0.1.0"

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "install") barekube_install_command ;;
    "install dependencies") barekube_install_dependencies_command ;;
    "install initial-master") barekube_install_initial_master_command ;;
    "install master-node") barekube_install_master_node_command ;;
    "install agent-node") barekube_install_agent_node_command ;;
    "longhorn") barekube_longhorn_command ;;
    "longhorn install-dependencies") barekube_longhorn_install_dependencies_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
